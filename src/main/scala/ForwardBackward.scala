/**
  * Created by davinchia on 1/19/17.
  */

import collection.mutable
import Types._
import Model._

object ForwardBackward {
  private val fwdCache: mutable.Map[(Target, State), Double] = mutable.HashMap[(Target, State), Double]()
  private val bckCache: mutable.Map[(Target, State), Double] = mutable.HashMap[(Target, State), Double]()

  def forwardE(t: Target, j: State): Double = {
    val key = (t, j)
    if (fwdCache contains key) {
      fwdCache(key)
    } else {
      val result = if (t > 0) {
        Math.log(states map { i =>
          Math.exp(Math.log(forwardE(t - 1, i)) + Math.log(transitions(t, i, j)))
        } sum) + Math.log(emissions(j, t))
      } else {
        Math.log(start(j)) + Math.log(emissions(j, 0))
      }
      fwdCache(key) = Math.exp(result)
      Math.exp(result)
    }
  }

  def backwardE(t: Target, i: State): Double = {
    val key = (t, i)
    if (bckCache contains key) {
      bckCache(key)
    } else {
      // This does not currently support t = 0
      val result = if (t < obs.length) {
        Math.log(states map { j =>
          Math.exp(Math.log(transitions(t, i, j)) + Math.log(emissions(j, t)) + Math.log(backwardE(t + 1, j)))
        } sum)
      } else {
        Math.log(1.0)
      }
      bckCache(key) = Math.exp(result)
      Math.exp(result)
    }
  }

  def prob_state_from_t1_to_t2(t1: Target, t2: Target, state: State) : BigDecimal = {
    val fwd = forwardE(t1, state)
    val bck = backwardE(t2+1, state)
//    println("fwd: " + fwd)
//    println("bck: " + bck)
    //    println()

    val total = (states map { (s) => { forwardE(obs.length-1, s) * backwardE(obs.length, s) } } sum)
    println("total: " + total)

    val indiv = { (t1+1 to t2) map { (t) => { transitions(t, state, state) * emissions(state, t) } } }.product * fwd * bck

    //    for (t <- t1+1 to t2) {
    //      println("trans: " + transitions(t, state, state) )
    //      println("emiss: " + emissions(state, t) )
    //    }

    println("indiv: " + indiv)
    val prob = BigDecimal(indiv) / BigDecimal(total)
    println("prob: " + prob)
    prob
  }

  def phred_state_from_t1_to_t2(t1: Target, t2: Target, state: State) : Double = {
    -10 * Math.log10((BigDecimal(1) - prob_state_from_t1_to_t2(t1, t2, state)).toDouble)
  }

  def prob_state_from_t1_to_t2_inverse(t1: Target, t2: Target, state: State) : BigDecimal = {
    val fwd = forwardE(t1, state)
    val bck = backwardE(t2+1, state)
    println("fwd: " + fwd)
    println("bck: " + bck)
    //    println()

    var total = (states map { (s) => { forwardE(obs.length-1, s) * backwardE(obs.length, s) } } sum)
    println("total: " + total)

    val indiv = { (t1+1 to t2) map { (t) => { transitions(t, state, state) * emissions(state, t) } } }.product * fwd * bck

    //    for (t <- t1+1 to t2) {
    //      println("trans: " + transitions(t, state, state) )
    //      println("emiss: " + emissions(state, t) )
    //    }

    println("indiv: " + indiv)
    val prob = (BigDecimal(total)-BigDecimal(indiv)) / BigDecimal(total)
    prob
  }

  def phred_state_from_t1_to_t2_inverse(t1: Target, t2: Target, state: State) : Double = {
    val a = prob_state_from_t1_to_t2_inverse(t1, t2, state)
    println(a); println(BigDecimal(1) - a)
    -10 * Math.log10(a.toDouble)
  }

  def reset_cache(): Unit = {
    fwdCache.clear()
    bckCache.clear()
  }

  def main(args: Array[String]): Unit = {
//    var states = List("Diploid", "Duplication", "Deletion")
//    var start = {
//      case "Diploid" => 1.0
//      case "Duplication" => 0.00000001
//      case "Deletion" => 0.00000001
//    }
//
//    // Table 2
//    var f: Double = 0.0
//
//    for (i <- 0 to ds.length - 1) {
//      f = Math.pow(Math.E, (-BigDecimal(ds(i)) / D).toDouble) // BigDecimal to fix underflow issues
//
//      transitions += ((i + 1, "Diploid", "Diploid") -> (1 - 2 * p))
//      transitions += ((i + 1, "Diploid", "Duplication") -> p)
//      transitions += ((i + 1, "Diploid", "Deletion") -> p)
//
//      transitions += ((i + 1, "Deletion", "Diploid") -> (f * q + (1 - f) * (1 - 2 * p)))
//      transitions += ((i + 1, "Deletion", "Duplication") -> ((1 - f) * p))
//      transitions += ((i + 1, "Deletion", "Deletion") -> (f * (1 - q) + (1 - f) * p))
//
//      transitions += ((i + 1, "Duplication", "Diploid") -> (f * q + (1 - f) * (1 - 2 * p)))
//      transitions += ((i + 1, "Duplication", "Duplication") -> (f * (1 - q) + (1 - f) * p))
//      transitions += ((i + 1, "Duplication", "Deletion") -> ((1 - f) * p))
//    }

//    val normDistDip = new NormalDistribution(0.0, 1.0)
//    val normDistDel = new NormalDistribution(-m, 1.0)
//    val normDistDup = new NormalDistribution(m, 1.0)
//
//    obs = List(-0.41299542138535994, -0.17490180390834065, -0.1886903954362933, 5.705381609827105, 3.84614534088253, 3.8822764225899706, 4.361319603035853, 5.377935125975705, 3.309127305045965, 2.567932700586726, 2.9226448417596953, -1.425176049639377, 0.7703639470620648, 0.7986864410584029, -0.7881716626570838, -1.0481716629159221, -0.39715144462685303, -1.008721233926663, -0.5285845715168708, 0.40194282031593137, -0.005845512715160396, 0.208503351194057, 0.21984502887548563, 0.11489591016961839, -0.518333693466908, -0.2036526448687854, -0.11694852471165292, -0.24398196212350712, -0.059914669949907545, -0.015416000483052224, 0.21165736464844373, -0.2794477890318955, -0.39660178204027463, -0.6115961304433222, -1.1540928016525038, -0.5943826085744839, -1.6943581134841887, 0.12827478281922852, -0.5626624808544248, -0.8164588598309396, -1.7246958537789816, 0.060621251266108234, 0.07985642137894848, 0.22390403989474425, -1.168704712879237, -0.574945816383214, -0.8972192585488876, -0.45783073121133183, 0.4073359090611979, 0.00784571688484403, 0.07850695363108275, -0.7610024889391638, 1.0915486765719293, 0.4194711608330125, -0.8041094898177343, 0.11630560663154148, -0.29750518922165625, -0.19439963714106767, -0.8290397178015066, -0.5745709114948853, 0.14830697728580666, -2.9494060966841182, -0.5021190051422628, -0.20464438503733404, 1.2588320522294403, -0.688552799821285, -0.8709245607339339, -0.8189779750945482, -0.22835287828848555, -1.0646459192859572, -1.9023941357461422, -1.0129519712227575, -0.5046605268399372, -0.5857827079645878, -0.41914829126167386, -0.9305482060973715, -0.16057297094513856, -0.21718607907621693, 0.08862339370875247, -0.0031263251987375773, -0.26335034082901204, -0.4751824147848261, -0.5919169498671119, 0.6527808019684539, -0.5532552496435065, -0.04379652378302663, -0.1343369175146906, -0.19558491178572826, -0.5902703821189086, -0.4641153729514392, -0.15963630983289825, -0.9485500846805567, -0.38366815399993354, 0.5973522652832822, 0.063259425929353, -0.43465062421969464, 0.34648300482269456, -0.28582449391923276, 1.161698597389376, -0.8579869063124709, 0.14123914193885742, 0.35311371791574636, 0.14728689477016557, 0.5985422027720173, 0.973100546421345, 0.23901197920283085, -0.3615029950211245, 0.3926730419436433, 0.25405032655517495, 0.7297252172286538, 1.0412074333158492, 1.664554471803238, 1.300928661218219, 0.9456642718656647, 0.28011338603212926, 0.8993966962725745, 0.7150309485543244, -0.28417876458864744, 0.19431403069022096, 0.730676334255033, -0.001096990726276442, -0.7373391518063453, 0.42120093897503036, 0.33781241155356495, 0.05933788055583659, 0.18551495643259636, -0.15126191825819657, -0.16865467978009535, -0.3184989140537152, -0.27599577600135694, 0.18384892838022318, 0.10318429784967939, 2.2142703665946297, 0.6642735264532265, -0.09655864003419246, 0.1487470315649175, 0.1868524018790649, -0.023300899115258678, -0.2935699270540008, -0.014035958433090308, 0.2575661223927808, 0.18121429051661855, -0.22561911677558436, 0.5328376600866541, 0.010002545998571666, -0.2594758920112018, -0.25791822846095397, -0.12205958672509015, -0.5631274286372445, -0.3851560663657924, -0.17383704671887715, -0.36422508804252995, -1.2328419371434955, 0.1794611668733193, 1.9078983943460055, -0.10517479810411362, -0.5928902817412423, 0.06383635011518592, -0.36087220929516645, -0.25967025554323714, -1.9731620817965567, -0.40010311002577026, 1.207277012517435, -0.42092893724050306, -2.1441744747219892E-4, -0.23606105893084026, -0.7080811760198379, 1.5243734258329065, -0.8533568287418831, -0.5159752603450781, -0.6475832788289629, 0.012552371787854478, -0.17387953200435496, -0.3092917449755063, -1.748909822222431, -0.8742219789720919, -0.5698871883108405, -2.3485960311243526, -0.7244597619475204, -0.5289280073235504, -0.39810896873775353, 0.22574228886395378, -0.39542098677600457, -1.4389167301449364, -1.507744873361603, -1.3677469673243479, -0.6271333555838458, 0.07076693335277956, 0.20526849360260166, -0.9633904391867886, -1.2469316282481293, -0.19300383283528125, 0.8998162717321841, -0.2545282267038634, -0.5091507669887143, 0.9288516834402663, -0.9601489592209054, 0.9163233413007548, 0.8487863321010698, 0.4655924909179534, -0.9421189749725903, -0.9260246547395681, -0.02047453830872115, 0.08933316801852416, -0.2768044776885456, 0.061940088764151545, -0.2999485576293211, -0.2937267329685674, -0.4334509365269478, 0.21104513366905975, 0.13565577178262964, 1.4803256553725137, -0.30038726508514896, -0.23009051256683408, 0.10721422963406455, 0.11413674127238557, 0.5111860732193523, 0.17982703053147023, 0.4516633214178752, -0.5431511359205725, 0.13596128201601151, -0.24455973203281023, 0.507891522934411, -0.26136659568445614, 0.07212492973297516, -0.6604362222696908, -0.2502811833529639, -0.04729091898068624, 0.17072749333038326, 1.6972255018239955, 0.3825513019326401, 0.017810010777895933, -0.3040713641603809, 0.20404857606490104, -0.3641945737316692, -0.27143200917710486, -0.4448847766866019, -0.16465727504099167, -0.5087883005967095, -0.2226792035785778, -0.062328811004172334, 0.0026452126570638565, 0.4775471770450577, -0.003190292207256803, -0.09025303597150054, -0.3020898086504384, 0.52180771432573, 2.0823992286625708, -0.12100062959092478, 0.09418898100586202, 0.1746273146436808, 0.7135083468314715, -0.32932143493506716, -0.12321987785147442, 0.5920279611807209, -0.7830359220088903, 0.5641543067858067, -0.6837014811691406, 0.4505585619735497, 0.9816869523843937, 0.2060506608106767, 0.23039353574833665, 0.36661490529255486, 0.019569368421358906, -0.1718602944149187)
//
//    var emission_probability: Map[(String, Int), Double] = Map()
//    // Generate emission probabilities for each sample
//    for (a <- 0 to obs.length - 1) {
//      val cur = obs(a)
//      emission_probability += (("Diploid", a) -> normDistDip.density(cur))
//      emission_probability += (("Duplication", a) -> normDistDup.density(cur))
//      emission_probability += (("Deletion", a) -> normDistDel.density(cur))
//    }
//    emissions = emission_probability
  }
}
